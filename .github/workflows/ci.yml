name: CI
on:
  workflow_dispatch:
  schedule:
    - cron: "0 16 * * *"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Should build?
        id: should_build
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source utils.sh
          toml_prep "$(cat config.toml)"

          is_youtube_latest() {
            t=$(toml_get_table YouTube)
            v=$(toml_get "$t" "version") || v=""
            if isoneof "$v" latest beta; then
              cur_yt=$(sed -n 's/.*YouTube: \(.*\)/\1/p' build.md | xargs)
              [ -z "$cur_yt" ] && return 1 # empty, fail=>dont build
              if [ "$v" = beta ]; then aav="true"; else aav="false"; fi
              last_ver=$(get_apkmirror_vers youtube "$aav" | get_largest_ver)
              [ -z "$last_ver" ] && return 1 # cant fetch, dont build
              echo "current yt version: '$cur_yt'"
              echo "latest yt version: '$last_ver'"
              [ "$cur_yt" != "$last_ver" ] # test success=>build, fail=>dont build
            else
              return 1 # not experimental, dont build
            fi
          }

          is_patches_latest() {
            PATCHES_SRC=$(toml_get "$(toml_get_table "")" patches-source) || PATCHES_SRC="revanced/revanced-patches"
            last_patches_url=$(gh_req https://api.github.com/repos/${PATCHES_SRC}/releases/latest - | json_get 'browser_download_url' | grep 'jar')
            last_patches=${last_patches_url##*/}
            cur_patches=$(sed -n 's/.*Patches: \(.*\)/\1/p' build.md | xargs)

            echo "current patches version: $cur_patches"
            echo "latest patches version: $last_patches"
            [ "$cur_patches" != "$last_patches" ] # test success=>build, fail=>dont build
          }

          if ! git checkout update; then
            echo "first time building!"
            echo "SHOULD_BUILD=1" >> $GITHUB_OUTPUT
          elif is_patches_latest || is_youtube_latest; then
            echo "build!"
            echo "SHOULD_BUILD=1" >> $GITHUB_OUTPUT
          else
            echo "dont build!"
            echo "SHOULD_BUILD=0" >> $GITHUB_OUTPUT
          fi

    outputs:
      SHOULD_BUILD: ${{ steps.should_build.outputs.SHOULD_BUILD }}
  config_check:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.SHOULD_BUILD == 1 }}
    env:
      TG_TOKEN: ${{ secrets.TG_TOKEN }}
      TG_CHAT: ${{ secrets.TG_CHAT }}
      TG_DEV: ${{ secrets.TG_DEV }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          cache: "npm"

      - name: Installing Node
        run: npm ci

      - name: Checking Config
        run: npm run-script check

      - name: On Failure
        id: send_telegram_failure
        if: ${{ failure() }}
        run: |
          POST="https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
          URL="[Failed Action]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"

          MSG="*Check patches config*
          ${URL}"

          curl -X POST --data-urlencode "parse_mode=Markdown" --data-urlencode "text=${MSG}" --data-urlencode "chat_id=${TG_DEV}" "$POST" >/dev/null
          echo "SHOULD_BUILD=0" >>$GITHUB_OUTPUT

      - name: On Success
        id: config
        shell: bash
        run: echo "SHOULD_BUILD=1" >> $GITHUB_OUTPUT

    outputs:
      SHOULD_BUILD: ${{ steps.config.outputs.SHOULD_BUILD }}
  build:
    permissions: write-all
    needs: config_check
    uses: ./.github/workflows/build.yml
    if: ${{ needs.config_check.outputs.SHOULD_BUILD == 1 }}
    secrets: inherit

